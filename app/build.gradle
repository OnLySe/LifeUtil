apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        applicationId "com.zzq.lifeutil"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    flavorDimensions 'version'
    productFlavors {
        demo {
            dimension 'version'
            applicationIdSuffix '.demo'
            versionNameSuffix '-demo'
        }
    }

    signingConfigs  {
        debug {
            def debugProperties = file('../keystore/debug.properties')
            if (debugProperties.canRead()) {
                Properties properties = new Properties()
                properties.load(new FileInputStream(debugProperties))
                storeFile = file(properties['STORE_FILE'])
                storePassword = properties['STORE_PASSWORD']
                keyAlias = properties['KEY_ALIAS']
                keyPassword = properties['KEY_PASSWORD']
            } else {
                println '签名文件丢失，查看debug.properties与zzq_debug.jks'
            }
        }

        release {
            def releaseProperties = file('../keystore/release.properties')
            if (releaseProperties.canRead()) {
                Properties properties = new Properties()
                properties.load(new FileInputStream(releaseProperties))
                storeFile = file(properties['STORE_FILE'])
                storePassword = properties['STORE_PASSWORD']
                keyAlias = properties['KEY_ALIAS']
                keyPassword = properties['KEY_PASSWORD']
            }else {
                println '签名文件丢失，查看release.properties与zzq.jks'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            applicationIdSuffix '.release'
            versionNameSuffix '-release'
        }

        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            signingConfig signingConfigs.debug
        }

        /*beta {
            initWith debug
            applicationIdSuffix ".beta"
            //指定使用release 这种buildType
            matchingFallbacks = ['debug']
        }*/
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // work-runtime-ktx 2.1.0 and above now requires Java 8
    kotlinOptions {
        jvmTarget = "1.8"
    }

    dataBinding {
        enabled = true
    }
}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation project(':library')
    kapt  'com.alibaba:arouter-compiler:1.2.2'

    if (!rootProject.ext.isPictureApplication) {
        implementation project(path: ':PictureModule')
    }

    if (!rootProject.ext.isNewsApplication) {
        implementation project(path: ':NewsModule')
    }

    kapt "androidx.room:room-compiler:$versions.room"
}